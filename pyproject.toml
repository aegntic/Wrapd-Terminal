[project]
name = "wrapd"
version = "2.0.0"
description = "WRAPD (Warp Replacement with AI-Powered Delivery) - Open-source terminal enhancement with AI integration"
authors = [
    {name = "WRAPD Team", email = "team@wrapd.dev"}
]
maintainers = [
    {name = "WRAPD Team", email = "team@wrapd.dev"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.8"
keywords = ["terminal", "ai", "warp", "gui", "productivity", "assistant", "command-line", "llm"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: User Interfaces",
    "Topic :: System :: Shells",
    "Topic :: Terminals",
    "Topic :: Utilities",
]

dependencies = [
    # Core GUI framework
    "PyQt5>=5.15.0",
    "PyQt5-Qt5>=5.15.0",
    
    # Async HTTP client for API calls
    "aiohttp>=3.8.0",
    "aiofiles>=23.0.0",
    
    # Secure credential storage
    "keyring>=23.0.0",
    
    # Command line interface enhancements
    "prompt-toolkit>=3.0.0",
    
    # Syntax highlighting
    "pygments>=2.10.0",
    
    # Configuration management
    "configparser>=5.0.0",
    "toml>=0.10.0",
    
    # System utilities
    "psutil>=5.8.0",
    "pathlib-mate>=1.0.0",
    
    # Date/time handling
    "python-dateutil>=2.8.0",
    
    # JSON schema validation
    "jsonschema>=4.0.0",
    
    # Regular expressions
    "regex>=2022.0.0",
    
    # Async utilities
    "asyncio-throttle>=1.0.0",
    
    # HTTP client utilities
    "httpx>=0.24.0",
    
    # Cache implementation
    "cachetools>=5.0.0",
    
    # Retry logic
    "tenacity>=8.0.0",
    
    # Rich text and progress bars
    "rich>=13.0.0",
    
    # Platform detection
    "platformdirs>=3.0.0",
    
    # SSH support (optional core)
    "paramiko>=2.9.0",
]

[project.optional-dependencies]
ssh = [
    "paramiko>=2.8.0",
]
dev = [
    "black>=23.0.0",
    "mypy>=1.0.0",
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-qt>=4.0.0",
    "pytest-cov>=4.0.0",
    "pre-commit>=3.0.0",
    "ruff>=0.0.270",
]
docs = [
    "sphinx>=6.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "sphinx-autodoc-typehints>=1.20.0",
]
build = [
    "pyinstaller>=5.0.0",
    "cx-freeze>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/wrapd-dev/wrapd"
Documentation = "https://docs.wrapd.dev"
Repository = "https://github.com/wrapd-dev/wrapd"
"Bug Tracker" = "https://github.com/wrapd-dev/wrapd/issues"

[project.scripts]
wrapd = "wrapd.main:main"

[project.gui-scripts]
wrapd-gui = "wrapd.main:main"

[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-dir]
"" = "src"

[tool.setuptools.package-data]
wrapd = [
    "resources/themes/*.css",
    "resources/icons/*.png",
    "resources/icons/*.svg",
    "resources/fonts/*.ttf",
    "resources/sounds/*.wav",
    "config/*.ini",
    "config/*.toml",
]

# Ruff linting and formatting
[tool.ruff]
line-length = 88
target-version = "py38"
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "Q",  # flake8-quotes
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]
"test_*.py" = ["B011"]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests", 
    "unit: marks tests as unit tests",
    "gui: marks tests as GUI tests",
]
asyncio_mode = "auto"
qt_api = "pyqt5"

# Coverage configuration
[tool.coverage.run]
source = ["src/wrapd"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/build/*",
    "*/dist/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError", 
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "PyQt5.*",
    "keyring.*",
    "prompt_toolkit.*",
    "pygments.*",
    "paramiko.*",
    "psutil.*",
    "platformdirs.*",
    "cachetools.*",
    "tenacity.*",
    "rich.*",
]
ignore_missing_imports = true